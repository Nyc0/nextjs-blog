{"pageProps":{"postData":{"id":"Tesla-tracker","contentHtml":"<p>Improving on the NVC static webpage scraper that I initially created, I wanted to create a dynamic scraper and display data over time. Since I have a keen interest in what Tesla is doing, I focused on their configuration pages.</p>\n<p>Trackers:</p>\n<ul>\n<li><a href=\"https://nyc0.github.io/nextjs-blog/mds\">Model S</a></li>\n<li><a href=\"https://nyc0.github.io/nextjs-blog/md3\">Model 3</a></li>\n<li><a href=\"https://nyc0.github.io/nextjs-blog/mdx\">Model X</a></li>\n<li><a href=\"https://nyc0.github.io/nextjs-blog/mdy\">Model Y</a></li>\n</ul>\n<h1>How do they work?</h1>\n<p>The pages reliese on two components.</p>\n<ol>\n<li>Collect information: a python script using request and selenium loads the web page and browse through the DOM component based on my initial analysis. The script collects the data in a JSON object, which get saved on completion.</li>\n<li>Display information: a Next.js page create the static web page based on the JSON file, and Chart.js object.\nIn order to review the data more easily, I have included button allowing to filter the charts based on an option prefix (P-, W-. I-, O-).</li>\n</ol>\n<h2>Next steps?</h2>\n<ul>\n<li>Add seater option data to mdy page</li>\n<li>Use Object programming to define a car and options</li>\n<li>S &#x26; X trackers</li>\n</ul>\n","title":"Tesla tracker","date":"2023-04-22"}},"__N_SSG":true}